class Main is
    this() is
        var E : Node
        var tree :
            PlusNode(1,
                PlusNode(2,
                    MinusNode(3, E, E),
                    PlusNode(4, E,
                        PlusNode(5, E, E)
                    )
                ),
                MinusNode(6,
                    PlusNode(7, E, E),
                    E
                )
            )
        //         1
        //       /   \
        //      2    -6
        //     / \   /
        //    -3  4 7
        //         \
        //          5
        var expectedRes : Integer(10)
        var v : Visitor
        v.visit(tree)
        if v.res.Equal(expectedRes).Not() then
            // TODO: error
        end
    end
end

class Visitor is
    var res : Integer(0)

    this() is
    end

    method visit(node : Node) is
    end

    method visit(node : PlusNode) is
        res := res.Plus(node.value)
        this.visit(node.left)
        this.visit(node.right)
    end

    method visit(node : MinusNode) is
        res := res.Minus(node.value)
        this.visit(node.left)
        this.visit(node.right)
    end
end

class Node is // empty node
    this() is
    end
end

class PlusNode extends Node is
    var value : Integer
    var left  : Node
    var right : Node

    this(_value : T, _left : Node, _right : Node) is
        value := _value
        left  := _left
        right := _right
    end
end

class MinusNode extends PlusNode is
end
